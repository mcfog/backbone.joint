#### Backbone.Joint.Deferred ###
#Backbone.Joint _hopes_ to borrow deferred from jQuery
#developer may override this to adapt their own deferred
#---
let @ = $J.Deferred = {}

  @when = $~when

  @defer = ->
    dfr = $.Deferred!
    
    {
      resolver: dfr~{resolve, reject, notify, state}
      promise: @_mkPromise dfr
    }

  #simple resolved promise creation
  @resolve = (...args)~>
    {resolver, promise} = @defer!
    resolver.resolve ...args
    promise

  #simple rejected promise creation
  @reject = (...args)~>
    {resolver, promise} = @defer!
    resolver.reject ...args
    promise
    
  #convert event to promise
  @listen = (obj, [okEvents, okCb], [failEvents, failCb] || [null, null])~>
    {resolver, promise} = @defer!
    
    obj.once okEvents, okHandler if okEvents

    obj.once failEvents, failHandler if failEvents

    function okHandler
      resolver.resolve result okCb
      obj.off failEvents, failHandler if failEvents
    function failHandler
      resolver.resolve result failCb
      obj.off okEvents, okHandler if okEvents
    function result cb
      if _.isFunction cb
        cb!
      else
        cb
    
    return promise

  #jQuery detection
  @_mkPromise = \
  if ver = $::jquery
    switch
    #jQ1.5~1.7 use `pipe` instead of `then`
    case ver.match /^1\.[5-7]/
      ->
        with it.promise!
          #monkey patch the difference
          &then = ->
            newPromise = @pipe ...
            newPromise.then = @@callee

            newPromise

    default
      -> it.promise!
  else
    -> it.promise!
